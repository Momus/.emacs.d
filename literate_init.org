+TITLE:       Literate Emacs Configuration
#+AUTHOR:      Dmitri Brengauz
#+EMAIL:       dmitri at momus dot net
#+DATE:        2016-03-15 Tue
#+DESCRIPTION: Managing my .emacs the literate programming way with org-mode.

* TODO [0/3] Fix the package dependcency problem. 
  Have to reinstall packages in this order:
  - [ ] use-package :: that's what I need to fix this in the first place
  - [ ] buffer-move :: move the buffers
  - [ ] magit :: really should just be part of Emacs
* General Settings
  Definitions found here apply to all emacs sessions.
*** Personal Information
    #+NAME: literate_init.el
    #+BEGIN_SRC emacs-lisp :tangle yes
        (setq user-full-name "Dmitri G. Brengauz"
              user-mail-address "dmitri at momus dot net")
    #+END_SRC

*** Load path
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/elisp/")    
    #+END_SRC

*** Package Management
    Adding [[http://melpa.org/#/getting-started][Melpa]] for magit and others.
    #+BEGIN_SRC emacs-lisp
    	(require 'package)
    	(add-to-list 'package-archives
                         '("melpa" . "https://melpa.org/packages/"))
    	(add-to-list 'package-archives
                         '("marmalade" . "http://marmalade-repo.org/packages/") t)
    	(add-to-list 'package-archives 
    		     '("org" . "http://orgmode.org/elpa/") t)
    	(package-initialize)
    #+END_SRC
    
*** Advanced Configutration
    In theory use-package will make configuting things even more elegant.
    #+BEGIN_SRC emacs-lisp
      (require 'use-package)
    #+END_SRC
    There are better defaults, let's use them.
    #+BEGIN_SRC emacs-lisp
;(use-package better-defautls
;  :ensure t)
(require 'better-defaults)
    #+END_SRC

*** Make the kill ring work with the OS clippboard
    #+BEGIN_SRC emacs-lisp
      (setq ;; makes killing/yanking interact with the clipboard
       x-select-enable-clipboard t
 
       ;; I'm actually not sure what this does but it's recommended?
       x-select-enable-primary t

       ;; Save clipboard strings into kill ring before replacing them.
       ;; When one selects something in another program to paste it into Emacs,
       ;; but kills something in Emacs before actually pasting it,
       ;; this selection is gone unless this variable is non-nil
       save-interprogram-paste-before-kill t

       ;; Shows all options when running apropos. For more info,
       ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html
       apropos-do-all t

       ;; Mouse yank commands yank at point instead of at click.
       mouse-yank-at-point t)
    #+END_SRC
*** Client Server Labor Relations
***** Fix ido so it shares buffers amongst frames. [[http://stackoverflow.com/questions/27465616/emacsclient-will-not-allow-two-different-frames-to-have-the-same-file-open][Source]]
      #+BEGIN_SRC emacs-lisp
        (setq ido-default-buffer-method 'selected-window)
      #+END_SRC
*** Mode Line
***** [[https://github.com/Malabarba/smart-mode-line][Smart-mode-line]]
      - intalled package smart-mode-line-powerline-theme
      - configuration
	#+BEGIN_SRC emacs-lisp
          (use-package smart-mode-line
                       ;:quelpa (smart-mode-line :repo "Bruce-Connor/smart-mode-line" :fetcher github)
:ensure t

                       :init
                       (setq sml/vc-mode-show-backend t)
                       (setq sml/no-confirm-load-theme t)
                       (setq sml/shorten-directory t)
                       ;(setq sml/shorten-modes t) ;interferes with Nyan Mode
                       (setq sml/name-width '40)
                       (setq sml/mode-width 'full)

                       :config
        	       (sml/apply-theme 'powerline))
          (sml/setup)
	#+END_SRC
***** Rich minority mode
      #+BEGIN_SRC emacs-lisp
        (rich-minority-mode 1)
      #+END_SRC
***** How about a nice clock?
      #+BEGIN_SRC emacs-lisp
      (defface egoge-display-time
	'((((type x w32 mac))
           (:foreground "#060525" :inherit bold))
          (((type tty))
           (:foreground "blue")))
	"Face used to display the time in the mode line.")

      ;; This causes the current time in the mode line to be displayed in
      ;; `egoge-display-time-face' to make it stand out visually.
      ;; Clock is set to 24 hour mode and two | to act as separators with
      ;; the system load indicator

      (setq display-time-string-forms
            '((propertize (concat 24-hours":"minutes"\|"load"\|")
                          'face 'egoge-display-time)))

      ;; This line has to be under the two functions above.  Execution order matters in Elisp.
      (display-time-mode 1)
      #+END_SRC

      #+RESULTS:
      : t

*** Useful Functions
***** Winner Mode Wins!
      #+BEGIN_SRC emacs-lisp
      (when (fboundp 'winner-mode) ;Compat test
        (winner-mode 1))

      ;;the 'fboundup' function test for Emacsen (specifically XEmacs) that don't
      ;; have winner-mode.
      #+END_SRC
***** Now trying Ivy: Ido Mode WAS TeH Bomb
      #+BEGIN_SRC emacs-lisp
        (require 'ivy)
        (ivy-mode t)
        (setq magit-completing-read-function 'ivy-completing-read)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-count-format "(%d/%d) ")

        ;;Integrate projectile into Ivy
        (counsel-projectile-on)
        ;; Make M-x magic again!
        (global-set-key (kbd "M-x") 'counsel-M-x)
      #+END_SRC
***** [[https://github.com/magnars/expand-region.el][Expand Region]]
      All sorts of goodies can be found in the docs for er/* functions.
      #+BEGIN_SRC emacs-lisp
        (require 'expand-region)
        (global-set-key (kbd "C-=") 'er/expand-region)
      #+END_SRC
******* Buffer-move 
          [[https://github.com/lukhas/buffer-move][buffer-move.el]] Move buffers around. This has it's own github
          module, which will have to be pulled for updates.
          #+BEGIN_SRC emacs-lisp
            (load "buffer-move.el")
          #+END_SRC

          We want current window to switch to previous buffer
          instead of swapping buffers of both windows:
          #+BEGIN_SRC emacs-lisp
            (setq buffer-move-behavior 'move)
          #+END_SRC
********* Unseful key bindings:                                       :keybind:
        #+BEGIN_SRC emacs-lisp
          (global-set-key (kbd "<C-S-up>")     'buf-move-up)
          (global-set-key (kbd "<C-S-down>")   'buf-move-down)
          (global-set-key (kbd "<C-S-left>")   'buf-move-left)
          (global-set-key (kbd "<C-S-right>")  'buf-move-right)
          (global-set-key (kbd "<C-tab>")      'other-window)
          ;; Keep C-tab in org-mode
          (define-key org-mode-map (kbd "<C-tab>") 'other-window)
        #+END_SRC

***** [[https://www.emacswiki.org/emacs/window-number.el][Window number!]]
      #+BEGIN_SRC emacs-lisp
      ;Window Number Mode is now a package, does not need to be loaded.
      ;(load "window-number")
      (require 'window-number)
      (window-number-mode)
      #+END_SRC
***** Hippie Expand!
      #+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "M-SPC") 'hippie-expand)
        ;; Lisp-friendly hippie expand
        (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol))
      #+END_SRC
***** Rainbow Delimiters!
      yay rainbows!
      #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      #+END_SRC
***** [[ http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][Sudo Edit]]
         #+BEGIN_SRC emacs-lisp
   (defun sudo-edit (&optional arg)
  "Edit currently visited file as root.
With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))

(global-set-key (kbd "C-x C-r") 'sudo-edit)
       #+END_SRC
*** Save your place in the file
    Don't forget to add the ~/.emacs.d/places file to .gitignore
    #+BEGIN_SRC emacs-lisp
      (require 'saveplace)
      (setq-default save-place t)
      ;; keep track of saved places in ~/.emacs.d/places
      (setq save-place-file (concat user-emacs-directory "places"))
    #+END_SRC
*** Backups
    remember to add the backups directory to .gitignore
    #+BEGIN_SRC emacs-lisp
        (setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                    				       "backups"))))
      (setq auto-save-default nil)
      (setq create-lockfiles nil)
    #+END_SRC
*** On-start global settings
***** Autocompletion better on than off.
      Currently, we are experimenting with [[http://company-mode.github.io/][company-mode]]
      #+BEGIN_SRC emacs-lisp
        (add-hook 'after-init-hook 'global-company-mode)
        (with-eval-after-load 'company
          (add-to-list 'company-backends 'company-elm))
      #+END_SRC
***** Window number mode
      Now installed from Melpa
      #+BEGIN_SRC emacs-lisp
        (require 'window-number)
        (window-number-mode 1)
        ;; Remaps the default window switch key to use window-number mode
        (global-set-key "\C-xo"  'window-number-switch)
        ;; Use the Meta key to switch between frames.
        (window-number-meta-mode t)

      #+END_SRC


***** TODO Enable Company Quickhelp (from Melpa) 
      #+BEGIN_SRC emacs-lisp
        (company-quickhelp-mode 1)
      #+END_SRC
* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html][Registers]]                                                         :keybind:
  These are highly personalizable, and should probaby be saved on a per-machine basis.
*** This init file
    #+BEGIN_SRC emacs-lisp
    (set-register ?e (cons 'file "~/.emacs.d/literate_init.org"))
    #+END_SRC
    
* External Programs
*** Ledger
    #+BEGIN_SRC emacs-lisp
      (autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
      (add-to-list 'load-path
         (expand-file-name "~/usr/src/ledger/lisp/"))
         (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
    #+END_SRC
*** Web Browser
***** TODO [0/1]Set Conkeror as default browser. 
      - [ ] Make clicked links open in existing conkeror process if
        one exist in same StumpWM window group.
* Org Mode
*** Outline View
    Generally keep it [[http://orgmode.org/manual/Clean-view.html][clean]] without too many bells and whistles
    #+BEGIN_SRC emacs-lisp
      (global-font-lock-mode 1)
      (require 'org)
      (require 'org-agenda)
      (setq org-odd-levels-only 1)
      (setq org-indent-mode t)
      (setq org-hide-leading-stars t)
    #+END_SRC

*** Code Blocks
    - Get rid of confirmation and syntax highlight code in text blocks:
      #+BEGIN_SRC emacs-lisp
        (setq org-confim-babel-evaluate nil
             org-src-fontify-natively t
            org-src-tab-acts-natively t)
      #+END_SRC
    
    - Load the languages we need; emacs-lisp we get for free.
      first you need to load them:
      #+BEGIN_SRC emacs-lisp
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((R . t)
           (ruby . t)
           (python . t)
           ;shell should be on by defult.
           ;(shell . t)
           )
         )
      #+END_SRC
      Then you need to require them. Shell should be installed by
      default.
      #+BEGIN_SRC emacs-lisp
        (require 'ob-ruby)
        (require 'ob-R)
        (require 'ob-python)
      #+END_SRC

*** Exporting
    - The htmlize package makes source code pretty on export
      #+BEGIN_SRC emacs-lisp
        (require 'htmlize)
      #+END_SRC
*** Capture
    - Replaces remember mode. Get stuff from your brain into org-mode
      quick!
      #+BEGIN_SRC emacs-lisp
        (setq org-default-notes-file (concat org-directory "/notes.org"))
        (define-key mode-specific-map [?a] 'org-agenda)

        (eval-after-load "org"
          '(progn
             (define-prefix-command 'org-todo-state-map)
             
             (define-key org-mode-map "\C-cx" 'org-todo-state-map)

             (define-key org-todo-state-map "x"
               #'(lambda nil (interactive) (org-todo "CANCELLED")))
             (define-key org-todo-state-map "d"
               #'(lambda nil (interactive) (org-todo "DONE")))
             (define-key org-todo-state-map "f"
               #'(lambda nil (interactive) (org-todo "DEFERRED")))
             (define-key org-todo-state-map "l"
               #'(lambda nil (interactive) (org-todo "DELEGATED")))
             (define-key org-todo-state-map "s"
               #'(lambda nil (interactive) (org-todo "STARTED")))
             (define-key org-todo-state-map "w"
               #'(lambda nil (interactive) (org-todo "WAITING")))
             (define-key org-agenda-mode-map "\C-n" 'next-line)
             (define-key org-agenda-keymap "\C-n" 'next-line)
             (define-key org-agenda-mode-map "\C-p" 'previous-line)
             (define-key org-agenda-keymap "\C-p" 'previous-line)
             )
          )
        ;; ;;https://lists.gnu.org/archive/html/emacs-orgmode/2008-07/msg00027.html]
        ;; ;; an (easier and cleaner, I think) alternate way to achieve
        ;; ;;this would be something like this:

        ;; (setq org-use-fast-todo-selection t)
        ;; (setq org-todo-keywords
        ;;       '((sequence "TODO(t)"
        ;;                   "STARTED(s)"
        ;;                   "WAITING(w)"
        ;;                   "DELEGATED(l)" "|"
        ;;                   "DONE(d)"
        ;;                   "DEFERRED(f)")))
       

      #+END_SRC
*** Agenda
    #+BEGIN_SRC emacs-lisp

    #+END_SRC
* Magit
*** Basic Config
    If there is more to be done, remember to use-package
    #+BEGIN_SRC emacs-lisp
     (require 'magit)
    #+END_SRC
    

*** MagitHub
    Remember to isntall the [[https://hub.github.com/hub][hub]] package with your favorite package manager.
    #+BEGIN_SRC emacs-lisp
     (use-package magithub
                  :after magit
                  :config 
                   (magithub-feature-autoinject t))
    #+END_SRC

*** Keybindings                                                     :keybind:
    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC
* Eshell
*** We start Eshell so much, it really needs its own keybinding :keybind:
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c e") 'eshell)
    #+END_SRC

*** TODO Get rid of seperate Eshell file
*** Nyan prompt
    Because why not?
    #+BEGIN_SRC emacs-lisp
    (add-hook 'eshell-load-hook 'nyan-prompt-enable)
    #+END_SRC
* Language Independent
***** [[https://github.com/bbatsov/projectile][Projectile]]
      #+BEGIN_SRC emacs-lisp
      (projectile-global-mode)
      #+END_SRC
***** [[http://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][Flycheck]] is the now, as flymake seems caput.
      #+BEGIN_SRC emacs-lisp
      (global-flycheck-mode)
      #+END_SRC
***** Yes-No- who needs them?
      #+BEGIN_SRC 
      (fset 'yes-or-no-p 'y-or-n-p)
      #+END_SRC

* Language Specfic
*** Ruby and Rails
    Most recentrly redone using [[https://lorefnon.me/2014/02/02/configuring-emacs-for-rails.html][this tutorial]]
***** Syntax Checking
      Using [[http://www.flycheck.org/en/latest/user/flycheck-versus-flymake.html#flycheck-versus-flymake][flycheck]] as flymake seems caput.
      #+BEGIN_SRC emacs-lisp
        ;(require 'flycheck-ruby)
        (add-hook 'ruby-mode-hook 'flymake-ruby-load)
      #+END_SRC
***** RVM 							    :keybind:
      #+BEGIN_SRC emacs-lisp
        (require 'rvm)
        ;; use rvm’s default ruby for the current Emacs session
        (rvm-use-default)
        ;; Integrate RVM into my Ruby editing experience
        ;; http://devblog.avdi.org/2011/10/11/rvm-el-and-inf-ruby-emacs-reboot-14/

        (add-hook 'ruby-mode-hook
            (lambda () (rvm-activate-corresponding-ruby)))

        (global-set-key (kbd "C-c r a") 'rvm-activate-corresponding-ruby)
        ;; Stolen from https://rejeep.github.io/emacs/elisp/ruby/2010/11/10/ruby-interpolation.html

        (defun ruby-interpolate ()
          "In a double quoted string, interpolate."
                (interactive)
                (insert "#")
                (when (and
                   (looking-back "\".*")
                   (looking-at ".*\""))
                  (insert "{}")
                  (backward-char 1)))
          ; (define-key ruby-mode-map (kbd "#") 'ruby-interpolate)

      #+END_SRC
***** [[https://github.com/bbatsov/rubocop-emacs][Rubocop]]
      #+BEGIN_SRC emacs-lisp
        (require 'rubocop)
        (add-hook 'ruby-mode-hook #'rubocop-mode)
      #+END_SRC
***** 
*** R  
***** packages: 
******* ess
*** Java - emacs-eclim
    #+BEGIN_SRC emacs-lisp
      (require 'eclim)
      (add-hook 'java-mode-hook 'eclim-mode)
      (require 'eclimd)
    #+END_SRC
***** use company-mode with Eclim
      #+BEGIN_SRC emacs-lisp
        (require 'company-emacs-eclim)
        (company-emacs-eclim-setup)
      #+END_SRC
***** 

*** XML
    Configured using [[https://fedoraproject.org/wiki/How_to_use_Emacs_for_XML_editing][this tutorial]]
    Make sure all XMLis stuff is edited with nxml-mode
    #+BEGIN_SRC emacs-lisp
      (setq auto-mode-alist (cons '("\\.xml$" . nxml-mode) auto-mode-alist))
      (setq auto-mode-alist (cons '("\\.xsl$" . nxml-mode) auto-mode-alist))
      (setq auto-mode-alist (cons '("\\.xhtml$" . nxml-mode) auto-mode-alist))
      (setq auto-mode-alist (cons '("\\.page$" . nxml-mode) auto-mode-alist))
      (autoload 'xml-mode "nxml" "XML editing mode" t)

      (eval-after-load 'rng-loc
        '(add-to-list 'rng-schema-locating-files "~/.schema/schema.xml"))
      (global-set-key [C-return] 'completion-at-point)
    #+END_SRC

*** Common Lisp
***** Point to the local SBCL installation
      #+BEGIN_SRC emacs-lisp
        (setq inferior-lisp-program "/home/kwaku/usr/bin/sbcl")
        (setq slime-contribs '(slime-fancy))
      #+END_SRC
***** Automatically load paredit when editing a Lisp file
      #+BEGIN_SRC emacs-lisp
        ;; More at http://www.emacswiki.org/emacs/ParEdit
        (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
        (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
        (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
        (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
        (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
        (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
        (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

        ;; eldoc-mode shows documentation in the minibuffer when writing code
        ;; http://www.emacswiki.org/emacs/ElDoc
        (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
        (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
      #+END_SRC
*** Clojure
***** Set up and configure the necessary packages.
      #+BEGIN_SRC emacs-lisp
      (use-package clojure-mode
         :ensure t
         )
      (use-package cider
         :ensure t)
      #+END_SRC
***** Stuff from  [[http://www.braveclojure.com/basic-emacs/][Brave Clojure]] that needs refactoring.
      #+BEGIN_SRC emacs-lisp
      	;; Enable paredit for Clojure
      	(add-hook 'clojure-mode-hook 'enable-paredit-mode)

      	;; This is useful for working with camel-case tokens, like names of
      	;; Java classes (e.g. JavaClassName)
      	(add-hook 'clojure-mode-hook 'subword-mode)

      	;; A little more syntax highlighting
      	(require 'clojure-mode-extra-font-locking)

      	;; syntax hilighting for midje
      	(add-hook 'clojure-mode-hook
                  (lambda ()
                    (setq inferior-lisp-program "lein repl")
                    (font-lock-add-keywords
                     nil
                     '(("(\\(facts?\\)"
                      	(1 font-lock-keyword-face))
    		   ("(\\(background?\\)"
                      	(1 font-lock-keyword-face))))
                    (define-clojure-indent (fact 1))
                    (define-clojure-indent (facts 1))))

      	;;;;
      	;; Cider
      	;;;;

      	;; provides minibuffer documentation for the code you're typing into the repl
      	(add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

      	;; go right to the REPL buffer when it's finished connecting
      	(setq cider-repl-pop-to-buffer-on-connect t)

      	;; When there's a cider error, show its buffer and switch to it
      	(setq cider-show-error-buffer t)
      	(setq cider-auto-select-error-buffer t)

      	;; Where to store the cider history.
      	(setq cider-repl-history-file "~/.emacs.d/cider-history")

      	;; Wrap when navigating history.
      	(setq cider-repl-wrap-history t)

      	;; enable paredit in your REPL
      	(add-hook 'cider-repl-mode-hook 'paredit-mode)

      	;; Use clojure mode for other extensions
      	(add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
      	(add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
      	(add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
      	(add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))


      	;; key bindings
      	;; these help me out with the way I usually develop web apps
      	(defun cider-start-http-server ()
          (interactive)
          (cider-load-current-buffer)
          (let ((ns (cider-current-ns)))
            (cider-repl-set-ns ns)
            (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
            (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))


      	(defun cider-refresh ()
          (interactive)
          (cider-interactive-eval (format "(user/reset)")))

      	(defun cider-user-ns ()
          (interactive)
          (cider-repl-set-ns "kwaku"))

      	(eval-after-load 'cider
          '(progn
             (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
             (define-key clojure-mode-map (kbd "C-M-r") 'cider-refresh)
             (define-key clojure-mode-map (kbd "C-c u") 'cider-user-ns)
             (define-key cider-mode-map (kbd "C-c u") 'cider-user-ns)))
      #+END_SRC
*** JavaScript and CoffeeSript
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.js$" . js-mode))
      (add-hook 'js-mode-hook 'subword-mode)
      (add-hook 'html-mode-hook 'subword-mode)
      (setq js-indent-level 2)
      (eval-after-load "sgml-mode"
        '(progn
           (require 'tagedit)
           (tagedit-add-paredit-like-keybindings)
           (add-hook 'html-mode-hook (lambda () (tagedit-mode 1)))))


      ;; coffeescript
      (add-to-list 'auto-mode-alist '("\\.coffee.erb$" . coffee-mode))
      (add-hook 'coffee-mode-hook 'subword-mode)
      (add-hook 'coffee-mode-hook 'highlight-indentation-current-column-mode)
      (add-hook 'coffee-mode-hook
                (defun coffee-mode-newline-and-indent ()
                  (define-key coffee-mode-map "\C-j" 'coffee-newline-and-indent)
                  (setq coffee-cleanup-whitespace nil)))
      (custom-set-variables
       '(coffee-tab-width 2))
    #+END_SRC
* And the rest
  I will gradually rewrite this a to be literate, and such, but for
  now everything else in my old init goes here. It is also part of the
  plan to get rid of config files in the elisp directory and put most of that here.
  #+BEGIN_SRC emacs-lisp

    ;;Eshell!
    (load "my_eshell")

    

    ;; We like desktop save mode, however, it is a bad idea to keep saved
    ;; desktops in a git repository.  So while it is enabled, make sure that
    ;; the desktop directory is in git ignore
        (desktop-save-mode 1)
        (add-to-list 'desktop-path  '"~/.emacs.d/desktops" )


    ;;Edit browser text-areas with Emacs!
    ;(require 'edit-server)
    ;(edit-server-start)
    ;;Some basic config options


    ;; A steady light, not blinking parens
        (show-paren-mode t)
        (setq show-paren-style 'expression)
        (setq show-paren-delay 0)

                                                ;No splash screen at start-up
        (setq inhibit-startup-screen t)

    ;; Take off  the training wheels for a while longer
        (menu-bar-mode -1)

    ;; Save space
        (tool-bar-mode -1)

        ;;; AUCTeX
        ;; Customary Customization, p. 1 and 16 in the manual
        ;; and http://www.emacswiki.org/emacs/AUCTeX#toc2

    ;;    (setq TeX-parse-self t); Enable parse on load.
    ;;    (setq TeX-auto-save t); Enable parse on save.
    ;;    (setq-default TeX-master nil)

    ;;    (setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

    ;;    (add-hook 'TeX-mode-hook 'flyspell-mode); Enable Flyspell mode for TeX modes such as AUCTeX. Highlights all misspelled words.
     ;;   (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode); Enable Flyspell program mode for emacs lisp mode, which highlights all misspelled words in comments and strings.
    ;;    (add-hook 'TeX-mode-hook
    ;;              (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.

        ;;; RefTeX
        ;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html
     ;;   (add-hook 'TeX-mode-hook 'turn-on-reftex)


  #+END_SRC
