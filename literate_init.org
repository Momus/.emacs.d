#+TITLE:       Literate Emacs Configuration
#+AUTHOR:      Dmitri Brengauz
#+EMAIL:       dmitri at momus dot net
#+DATE:        2016-03-15 Tue
#+DESCRIPTION: Managing my .emacs the literate programming way with org-mode.

* General Settings
  Definitions found here apply to all emacs sessions.
*** Personal Information
  #+NAME: literate_init.el
     #+BEGIN_SRC emacs-lisp :tangle yes
      (setq user-full-name "Dmitri G. Brengauz"
            user-mail-address "dmitri at momus dot net")
     #+END_SRC
*** Load path
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/elisp/")    
    #+END_SRC
*** Package Management
    #+BEGIN_SRC emacs-lisp
      (require 'package)
      (setq package-archives
            '(("melpa" . "https://melpa.org/packages/")
                     '("melpa-stable" . "https://stable.melpa.org/packages/")
                   '("org" . "https://orgmode.org/elpa/")
                   '("elpa" . "https://elpa.gnu.org/packages")))
      (package-initialize)

      (unless package-archive-contents
        (package-refresh-contents))

      ;; not sure this is 100% necessary, maybe for non-Linux systems
      (unless (package-installed-p 'use-package)
        (package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t)
    #+END_SRC
*** EMS Videos before letiterate.  Put everything in a big code block first
    #+begin_src emacs-lisp
            ;; Thatks but no thanks:
            (setq inhibit-startup-message t)
            (scroll-bar-mode -1)  ;; I never even know they're there
            (tool-bar-mode -1)    ;; toolbar seldom useful
            (tooltip-mode -1)     ;; no tooltips
            (set-fringe-mode 10)  ;; default is 8, so this isn't wild
            (menu-bar-mode -1)    ;; it will still be there if you need it
            (setq visible-bell t) ;; may be less anoying than a beep
            (tab-bar-mode 1)

            ;; get my desktop back
            (desktop-save-mode t)
            (setq desktop-save t)

            ;; make the escape key useful, even if one is used to C-g
            (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

            (use-package command-log-mode
              :config
                  (global-command-log-mode)) ;; see what we did
            ;; REM C-c o to open command log mode buffer

            (column-number-mode)
            (global-display-line-numbers-mode t)

            ;; Disable line numbers for some modes
            (dolist (mode '(org-mode-hook
                            term-mode-hook
                            shell-mode-hook
                            eshell-mode-hook))
              (add-hook mode (lambda () (display-line-numbers-mode 0))))


            (use-package ivy
              :diminish
              :bind (("C-s" . swiper)
                     :map ivy-minibuffer-map
                     ("TAB" . ivy-alt-done)	
                     ("C-l" . ivy-alt-done)
                     :map ivy-switch-buffer-map
                     ("C-d" . ivy-switch-buffer-kill)
                     :map ivy-reverse-i-search-map
                     ("C-d" . ivy-reverse-i-search-kill))
              :config
              (ivy-mode 1))
            (global-set-key (kbd "C-x b") 'counsel-switch-buffer)

            ;; Get some doc strings for keybindings
            (use-package ivy-rich
              :init
              (ivy-rich-mode 1))

            ;; counsel is pulled in with ivy, this is to configure bindings
            (use-package counsel
              :bind (("M-x" . counsel-M-x)
                     ("C-x b" . counsel-ibuffer)
                     ("C-x C-f" . counsel-find-file)
                     :map minibuffer-local-map
                     ("C-r" . 'counsel-minibuffer-history)))


            ;; for this to work and look cool, gt nerd-icons:
            ;; https://emacs.stackexchange.com/questions/78276/strange-symbols-in-doom-modeline
            ;; run M-x all-the-icons-install-fonts
            (use-package all-the-icons)
            (use-package doom-modeline
              :ensure t
              :init (doom-modeline-mode 1)
              :custom ((doom-modeline-height 15)))

            (use-package doom-themes
              :init (load-theme 'doom-dracula t))

      (show-paren-mode 1)
      (setq show-paren-style 'expression)

            (use-package rainbow-delimiters
              :hook (prog-mode . rainbow-delimiters-mode))


            (use-package which-key
              :init (which-key-mode)
              :diminish which-key-mode
              :config
              (setq which-key-idle-delay 1))

            (use-package helpful
              :custom
              (counsel-describe-function-function #'helpful-callable)
              (counsel-describe-variable-function #'helpful-variable)
              :bind
              ([remap describe-function] . counsel-describe-function)
              ([remap describe-command] . helpful-command)
              ([remap describe-variable] . counsel-describe-variable)
              ([remap describe-key] . helpful-key))
    #+end_src
*** hydra [[https://www.youtube.com/watch?v=xaZMwNELaJY][video 3]]
      #+begin_src emacs-lisp
	;; setup transient keybindings for repetative actions.
	(use-package hydra)

	(defhydra hydra-text-scale (:timeout 5)
	  "scale text"
	  ("j" text-scale-increase "in")
	  ("k" text-scale-decrease "out")
	  ("f" nil "finished" :exit t))

	(set-frame-parameter nil 'undecorated t)
     #+end_src
*** projectile and magit [[https://www.youtube.com/watch?v=INTu30BHZGk][video 4]]
**** projectile
     [[https://docs.projectile.mx/projectile/index.html][project interaction library for Emacs]]
     create an empty .projectile file in project root
   #+begin_src emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       :custom ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       ;; NOTE: Set this to the folder where you keep your Git repos!
       (when (file-directory-p "~/repos/")
	 (setq projectile-project-search-path '("~/repos")))
       ;; First thing to do when projectile starts
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :config (counsel-projectile-mode))

    #+end_src
**** magit
     #+begin_src emacs-lisp
       (use-package magit)
	 ;;:custom
	 ;; do the diff in same window
	 ;;(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
	 

       ;;  If I'm ever doing things wiht Github, look at this package again.
       ;; NOTE: Make sure to configure a GitHub token before using this package!
       ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
       ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
       ;; (use-package forge)
     #+end_src
*** org mode basics [[https://www.youtube.com/watch?v=VcgjTEa0kU4][video 5]]
   #+begin_src emacs-lisp
     ;; This is needed as of Org 9.2
            (defun efs/org-mode-setup ()
              (org-indent-mode)
              (variable-pitch-mode 1)
              (auto-fill-mode 0) ;; try vis line instead for a while
              (visual-line-mode 1))

     (require 'org-tempo)
     (add-to-list 'org-modules 'org-tempo t)
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))




            (defun efs/org-font-setup ()
              ;; Replace list hyphen with dot
              (font-lock-add-keywords 'org-mode
                                      '(("^ *\\([-]\\) "
                                         (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

              ;; Set faces for heading levels
              (dolist (face '((org-level-1 . 1.5)
                              (org-level-2 . 1.4)
                              (org-level-3 . 1.3)
                              (org-level-4 . 1.2)
                              (org-level-5 . 1.1)
                              (org-level-6 . 1.1)
                              (org-level-7 . 1.1)
                              (org-level-8 . 1.1)))
                                             ; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))
                )

              ;; Ensure that anything that should be fixed-pitch in Org files appears that way
              (set-face-attribute 'org-block nil :foreground  'unspecified :inherit 'fixed-pitch)
              (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
              (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
              (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
              (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
              (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
              (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

     (use-package org
       :hook (org-mode . efs/org-mode-setup)
       :config
       (setq org-ellipsis " ▾")
       (efs/org-font-setup))

     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
     ; :custom
     ; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
       )

     (defun efs/org-mode-visual-fill ()
       (setq visual-fill-column-width 110
             visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :hook (org-mode . efs/org-mode-visual-fill))

     ;;https://github.com/emacsmirror/mixed-pitch
     (use-package mixed-pitch
       :hook
       ;; If you want it in all text modes:
       (text-mode . mixed-pitch-mode))
#+end_src

*** TODO organize life with org [[https://www.youtube.com/watch?v=PNE-mgkZ6HM][video 6]]
do this after I fifgure more things out
#+begin_src emacs-lisp
    ;; not in video, but this is to keep frames sane
  (setq org-agenda-window-setup 'current-window)
  
#+end_src

***  Configure Everything with Org Babel [[https://www.youtube.com/watch?v=kkqVTDbfYp4][video 7]]
#+begin_src emacs-lisp
  ;; This is "insecture" but go with it for now:
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

***  Build Your Own IDE with lsp-mode [[https://www.youtube.com/watch?v=E-NAM9U5JYE][video 8]]
#+begin_src emacs-lisp

#+end_src
