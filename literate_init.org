#+TITLE:       Literate Emacs Configuration
#+AUTHOR:      Dmitri Brengauz
#+EMAIL:       dmitri at momus dot net
#+DATE:        2016-03-15 Tue
#+DESCRIPTION: Managing my .emacs the literate programming way with org-mode.

* General Settings
  Definitions found here apply to all emacs sessions.
*** Personal Information
    #+NAME: literate_init.el
    #+BEGIN_SRC emacs-lisp :tangle yes
        (setq user-full-name "Dmitri G. Brengauz"
              user-mail-address "dmitri at momus dot net")
    #+END_SRC
*** Load path
    #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/elisp/")    
    #+END_SRC
*** Package Management
    #+BEGIN_SRC emacs-lisp
      (require 'package)
      (setq package-archives
		   '(("melpa" . "https://melpa.org/packages/")
		   '("melpa-stable" . "https://stable.melpa.org/packages/")
		   '("org" . "https://orgmode.org/elpa/")
		   '("elpa" . "https://elpa.gnu.org/packages")))
      (package-initialize)

      (unless package-archive-contents
	(package-refresh-contents))

      ;; not sure this is 100% necessary, maybe for non-Linux systems
      (unless (package-installed-p 'use-package)
	(package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t)
    #+END_SRC
    
*** TODO Structured Templates
    - [ ] Find a better place for it: this is here just to aid in starting my slow rewrite https://www.youtube.com/watch?v=kkqVTDbfYp4 14:00
      #+begin_src emacs-lisp
	;; This is needed as of Org 9.2
	(require 'org-tempo)

	(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
	(add-to-list 'org-structure-template-alist '("py" . "src python"))
        (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      #+end_src

    - remember to include this somewhere.
    #+begin_src emacs-lisp
      (tab-bar-mode 1)
      ;; figure out a good font and size
    #+end_src

*** EMS Videos before letiterate.  Put everything in a big code block first
    #+begin_src emacs-lisp
      ;; Thatks but no thanks:
      (setq inhibit-startup-message t)
      (scroll-bar-mode -1)  ;; I never even know they're there
      (tool-bar-mode -1)    ;; toolbar seldom useful
      (tooltip-mode -1)     ;; no tooltips
      (set-fringe-mode 10)  ;; default is 8, so this isn't wild
      (menu-bar-mode -1)    ;; it will still be there if you need it
      (setq visible-bell t) ;; may be less anoying than a beep

      ;; make the escape key useful, even if one is used to C-g
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

      (use-package command-log-mode
	:config
	    (global-command-log-mode)) ;; see what we did
      ;; REM C-c o to open command log mode buffer


      (column-number-mode)
      (global-display-line-numbers-mode t)

      ;; Disable line numbers for some modes
      (dolist (mode '(org-mode-hook
		      term-mode-hook
		      shell-mode-hook
		      eshell-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))


      (use-package ivy
	:diminish
	:bind (("C-s" . swiper)
	       :map ivy-minibuffer-map
	       ("TAB" . ivy-alt-done)	
	       ("C-l" . ivy-alt-done)
	       :map ivy-switch-buffer-map
	       ("C-d" . ivy-switch-buffer-kill)
	       :map ivy-reverse-i-search-map
	       ("C-d" . ivy-reverse-i-search-kill))
	:config
	(ivy-mode 1))

      ;; Get some doc strings for keybindings
      (use-package ivy-rich
	:init
	(ivy-rich-mode 1))

      ;; counsel is pulled in with ivy, this is to configure bindings
      (use-package counsel
	:bind (("M-x" . counsel-M-x)
	       ("C-x b" . counsel-ibuffer)
	       ("C-x C-f" . counsel-find-file)
	       :map minibuffer-local-map
	       ("C-r" . 'counsel-minibuffer-history)))


      ;; for this to work and look cool, gt nerd-icons:
      ;; https://emacs.stackexchange.com/questions/78276/strange-symbols-in-doom-modeline
      (use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1)
	:custom ((doom-modeline-height 15)))

      (use-package doom-themes
	:init (load-theme 'doom-dracula))


      (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode))

      (use-package which-key
	:init (which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 1))

      (use-package helpful
	:custom
	(counsel-describe-function-function #'helpful-callable)
	(counsel-describe-variable-function #'helpful-variable)
	:bind
	([remap describe-function] . counsel-describe-function)
	([remap describe-command] . helpful-command)
	([remap describe-variable] . counsel-describe-variable)
	([remap describe-key] . helpful-key))
    #+end_src
